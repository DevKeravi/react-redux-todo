{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { Map, List } from \"immutable\";\nimport * as postApi from \"../api/posts\";\nimport { call, put, all, takeEvery } from \"redux-saga/effects\";\nconst ADD = \"todo/ADD\";\nconst DEL = \"todo/DEL\";\nconst GET = \"todo/GET\";\nconst DONE = \"todo/DONE\";\nconst GET_POSTS_SUCCESS = \"todo/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"todo/GET_POSTS_ERROR\";\nconst ADD_POST_SUCCESS = \"todo/ADD_POSTS_SUCCESS\";\nconst ADD_POST_ERROR = \"todo/ADD_POST_ERROR\";\nexport const add = createAction(ADD);\nexport const del = createAction(DEL);\nexport const get = createAction(GET);\nexport const done = createAction(DONE);\nconst initialState = Map({\n  isLoading: false,\n  error: null,\n  data: List([Map({\n    id: 0,\n    text: \"\",\n    isdone: false,\n    date: null\n  })])\n});\n\nfunction* getPostsSaga() {\n  try {\n    const posts = yield call(postApi.getPosts);\n    yield put({\n      type: GET_POSTS_SUCCESS,\n      payload: posts\n    });\n  } catch (e) {\n    yield put({\n      type: GET_POSTS_ERROR,\n      error: true,\n      payload: e\n    });\n  }\n}\n\nfunction* addPostSaga() {\n  try {\n    const result = yield call(postApi.createPost({\n      text: \"hi\"\n    }));\n    yield put({\n      type: ADD_POST_SUCCESS,\n      payload: result\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_ERROR,\n      error: true,\n      payload: e\n    });\n  }\n}\n\nexport function* postsSaga() {\n  yield takeEvery(GET, getPostsSaga);\n  yield takeEvery(ADD, addPostSaga);\n}\nexport function* rootSaga() {\n  yield all([postsSaga()]);\n}\nexport default handleActions({\n  [ADD]: (state, action) => {\n    return state.set(\"isLoading\", true);\n  },\n  //TODO Input data payload\n  [ADD_POST_SUCCESS]: (state, action) => {\n    return state.set(\"isLoading\", false);\n  },\n  [ADD_POST_ERROR]: (state, action) => {\n    return state.merge({\n      isLoading: false,\n      error: action.payload\n    });\n  },\n  [DEL]: (state, action) => {\n    return;\n  },\n  [GET]: (state, action) => {\n    return;\n  },\n  [GET_POSTS_SUCCESS]: (state, action) => {\n    return;\n  },\n  [GET_POSTS_ERROR]: (state, action) => {\n    return;\n  },\n  [DONE]: (state, action) => {\n    return;\n  }\n}, initialState);","map":{"version":3,"sources":["/home/cmkrosp/go/src/react-redux-todo/frontend/src/modules/todo.js"],"names":["createAction","handleActions","Map","List","postApi","call","put","all","takeEvery","ADD","DEL","GET","DONE","GET_POSTS_SUCCESS","GET_POSTS_ERROR","ADD_POST_SUCCESS","ADD_POST_ERROR","add","del","get","done","initialState","isLoading","error","data","id","text","isdone","date","getPostsSaga","posts","getPosts","type","payload","e","addPostSaga","result","createPost","postsSaga","rootSaga","state","action","set","merge"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { Map, List } from \"immutable\";\nimport * as postApi from \"../api/posts\";\nimport { call, put, all, takeEvery } from \"redux-saga/effects\";\n\nconst ADD = \"todo/ADD\";\nconst DEL = \"todo/DEL\";\nconst GET = \"todo/GET\";\nconst DONE = \"todo/DONE\";\n\nconst GET_POSTS_SUCCESS = \"todo/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"todo/GET_POSTS_ERROR\";\n\nconst ADD_POST_SUCCESS = \"todo/ADD_POSTS_SUCCESS\";\nconst ADD_POST_ERROR = \"todo/ADD_POST_ERROR\";\n\nexport const add = createAction(ADD);\nexport const del = createAction(DEL);\nexport const get = createAction(GET);\nexport const done = createAction(DONE);\n\nconst initialState = Map({\n  isLoading: false,\n  error: null,\n  data: List([\n    Map({\n      id: 0,\n      text: \"\",\n      isdone: false,\n      date: null,\n    }),\n  ]),\n});\nfunction* getPostsSaga() {\n  try {\n    const posts = yield call(postApi.getPosts);\n    yield put({\n      type: GET_POSTS_SUCCESS,\n      payload: posts,\n    });\n  } catch (e) {\n    yield put({\n      type: GET_POSTS_ERROR,\n      error: true,\n      payload: e,\n    });\n  }\n}\n\nfunction* addPostSaga() {\n  try {\n    const result = yield call(postApi.createPost({ text: \"hi\" }));\n    yield put({\n      type: ADD_POST_SUCCESS,\n      payload: result,\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_ERROR,\n      error: true,\n      payload: e,\n    });\n  }\n}\nexport function* postsSaga() {\n  yield takeEvery(GET, getPostsSaga);\n  yield takeEvery(ADD, addPostSaga);\n}\n\nexport function* rootSaga() {\n  yield all([postsSaga()]);\n}\n\nexport default handleActions(\n  {\n    [ADD]: (state, action) => {\n      return state.set(\"isLoading\", true);\n    },\n    //TODO Input data payload\n    [ADD_POST_SUCCESS]: (state, action) => {\n      return state.set(\"isLoading\", false);\n    },\n    [ADD_POST_ERROR]: (state, action) => {\n      return state.merge({ isLoading: false, error: action.payload });\n    },\n    [DEL]: (state, action) => {\n      return;\n    },\n    [GET]: (state, action) => {\n      return;\n    },\n    [GET_POSTS_SUCCESS]: (state, action) => {\n      return;\n    },\n    [GET_POSTS_ERROR]: (state, action) => {\n      return;\n    },\n    [DONE]: (state, action) => {\n      return;\n    },\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}