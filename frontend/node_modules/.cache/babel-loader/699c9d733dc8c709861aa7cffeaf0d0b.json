{"ast":null,"code":"import createSagaMiddleware from \"@redux-saga/core\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport { rootSaga } from \"../saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport todoReducer from \"../modules/todo\";\nconst reducers = combineReducers({\n  todo: todoReducer\n});\nconst sagaMiddleware = createSagaMiddleware();\n\nconst createStore = () => {\n  const store = configureStore({\n    reducer: reducers,\n    middleware: [sagaMiddleware],\n    enhancer: composeWithDevTools(applyMiddleware(...middlewares))\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default createStore;","map":{"version":3,"sources":["/home/cmkrosp/go/src/react-redux-todo/frontend/src/store/createStore.js"],"names":["createSagaMiddleware","configureStore","combineReducers","rootSaga","composeWithDevTools","todoReducer","reducers","todo","sagaMiddleware","createStore","store","reducer","middleware","enhancer","applyMiddleware","middlewares","run"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,kBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,MAAMC,QAAQ,GAAGJ,eAAe,CAAC;AAC/BK,EAAAA,IAAI,EAAEF;AADyB,CAAD,CAAhC;AAIA,MAAMG,cAAc,GAAGR,oBAAoB,EAA3C;;AACA,MAAMS,WAAW,GAAG,MAAM;AACxB,QAAMC,KAAK,GAAGT,cAAc,CAAC;AAC3BU,IAAAA,OAAO,EAAEL,QADkB;AAE3BM,IAAAA,UAAU,EAAE,CAACJ,cAAD,CAFe;AAG3BK,IAAAA,QAAQ,EAAET,mBAAmB,CAACU,eAAe,CAAC,GAAGC,WAAJ,CAAhB;AAHF,GAAD,CAA5B;AAKAP,EAAAA,cAAc,CAACQ,GAAf,CAAmBb,QAAnB;AACA,SAAOO,KAAP;AACD,CARD;;AASA,eAAeD,WAAf","sourcesContent":["import createSagaMiddleware from \"@redux-saga/core\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport { rootSaga } from \"../saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport todoReducer from \"../modules/todo\";\n\nconst reducers = combineReducers({\n  todo: todoReducer,\n});\n\nconst sagaMiddleware = createSagaMiddleware();\nconst createStore = () => {\n  const store = configureStore({\n    reducer: reducers,\n    middleware: [sagaMiddleware],\n    enhancer: composeWithDevTools(applyMiddleware(...middlewares)),\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport default createStore;\n"]},"metadata":{},"sourceType":"module"}