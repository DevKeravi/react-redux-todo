{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: false,\n  error: null,\n  data: [{\n    id: 0,\n    text: \"\",\n    isdone: false,\n    date: null\n  }]\n};\nconst todoSlice = createSlice({\n  name: \"todo\",\n  initialState,\n  reducers: {\n    ADD(state, action) {\n      console.log(\"ADD\");\n      state.isLoading = true;\n    },\n\n    ADD_POST_SUCCESS(state, action) {\n      state.isLoading = false;\n    },\n\n    ADD_POST_ERROR(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    DEL(state, action) {},\n\n    GET(state, action) {\n      state.isLoading = true;\n    },\n\n    GET_POSTS_SUCCESS(state, action) {\n      state.isLoading = false;\n      state.data = action.payload;\n    },\n\n    GET_POSTS_ERROR(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    DONE(state, action) {}\n\n  }\n});\nconst {\n  reducer,\n  actions\n} = todoSlice;\nexport const {\n  ADD,\n  ADD_POST_SUCCESS,\n  ADD_POST_ERROR,\n  DEL,\n  GET,\n  GET_POSTS_SUCCESS,\n  GET_POSTS_ERROR,\n  DONE\n} = actions;\nexport default reducer;\n/*\nconst ADD = \"todo/ADD\";\nconst DEL = \"todo/DEL\";\nconst GET = \"todo/GET\";\nconst DONE = \"todo/DONE\";\n\nconst GET_POSTS_SUCCESS = \"todo/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"todo/GET_POSTS_ERROR\";\n\nconst ADD_POST_SUCCESS = \"todo/ADD_POSTS_SUCCESS\";\nconst ADD_POST_ERROR = \"todo/ADD_POST_ERROR\";\n\nexport const add = createAction(ADD);\nexport const del = createAction(DEL);\nexport const get = createAction(GET);\nexport const done = createAction(DONE);\n\nconst todoReducer = createReducer(\n  initialState,\n  {\n    [ADD]: (state, action) => {\n      //return state.set(\"isLoading\", true);\n      state.isLoading = true;\n    },\n    [ADD_POST_SUCCESS]: (state, action) => {\n      //return state.set(\"isLoading\", false);\n      state.isLoading = false;\n    },\n    [ADD_POST_ERROR]: (state, action) => {\n      //return state.merge({ isLoading: false, error: action.payload });\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    [DEL]: (state, action) => {\n      return;\n    },\n    [GET]: (state, action) => {\n      //return state.set(\"isLoading\", true);\n      state.isLoading = true;\n    },\n    [GET_POSTS_SUCCESS]: (state, action) => {\n      //return state.merge({ isLoading: false, data: action.payload });\n      state.isLoading = false;\n      state.data = action.payload;\n    },\n    [GET_POSTS_ERROR]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    [DONE]: (state, action) => {\n      return;\n    },\n  },\n  initialState\n);\n*/","map":{"version":3,"sources":["/home/cmkrosp/go/src/react-redux-todo/frontend/src/modules/todo.js"],"names":["createSlice","initialState","isLoading","error","data","id","text","isdone","date","todoSlice","name","reducers","ADD","state","action","console","log","ADD_POST_SUCCESS","ADD_POST_ERROR","payload","DEL","GET","GET_POSTS_SUCCESS","GET_POSTS_ERROR","DONE","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,IAAI,EAAE,CACJ;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,MAAM,EAAE,KAHV;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADI;AAHa,CAArB;AAYA,MAAMC,SAAS,GAAGT,WAAW,CAAC;AAC5BU,EAAAA,IAAI,EAAE,MADsB;AAE5BT,EAAAA,YAF4B;AAG5BU,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAH,MAAAA,KAAK,CAACX,SAAN,GAAkB,IAAlB;AACD,KAJO;;AAKRe,IAAAA,gBAAgB,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AAC9BD,MAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACD,KAPO;;AAQRgB,IAAAA,cAAc,CAACL,KAAD,EAAQC,MAAR,EAAgB;AAC5BD,MAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACAW,MAAAA,KAAK,CAACV,KAAN,GAAcW,MAAM,CAACK,OAArB;AACD,KAXO;;AAYRC,IAAAA,GAAG,CAACP,KAAD,EAAQC,MAAR,EAAgB,CAAE,CAZb;;AAaRO,IAAAA,GAAG,CAACR,KAAD,EAAQC,MAAR,EAAgB;AACjBD,MAAAA,KAAK,CAACX,SAAN,GAAkB,IAAlB;AACD,KAfO;;AAgBRoB,IAAAA,iBAAiB,CAACT,KAAD,EAAQC,MAAR,EAAgB;AAC/BD,MAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACAW,MAAAA,KAAK,CAACT,IAAN,GAAaU,MAAM,CAACK,OAApB;AACD,KAnBO;;AAoBRI,IAAAA,eAAe,CAACV,KAAD,EAAQC,MAAR,EAAgB;AAC7BD,MAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACAW,MAAAA,KAAK,CAACV,KAAN,GAAcW,MAAM,CAACK,OAArB;AACD,KAvBO;;AAwBRK,IAAAA,IAAI,CAACX,KAAD,EAAQC,MAAR,EAAgB,CAAE;;AAxBd;AAHkB,CAAD,CAA7B;AA+BA,MAAM;AAAEW,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBjB,SAA7B;AACA,OAAO,MAAM;AACXG,EAAAA,GADW;AAEXK,EAAAA,gBAFW;AAGXC,EAAAA,cAHW;AAIXE,EAAAA,GAJW;AAKXC,EAAAA,GALW;AAMXC,EAAAA,iBANW;AAOXC,EAAAA,eAPW;AAQXC,EAAAA;AARW,IASTE,OATG;AAUP,eAAeD,OAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  isLoading: false,\n  error: null,\n  data: [\n    {\n      id: 0,\n      text: \"\",\n      isdone: false,\n      date: null,\n    },\n  ],\n};\nconst todoSlice = createSlice({\n  name: \"todo\",\n  initialState,\n  reducers: {\n    ADD(state, action) {\n      console.log(\"ADD\");\n      state.isLoading = true;\n    },\n    ADD_POST_SUCCESS(state, action) {\n      state.isLoading = false;\n    },\n    ADD_POST_ERROR(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    DEL(state, action) {},\n    GET(state, action) {\n      state.isLoading = true;\n    },\n    GET_POSTS_SUCCESS(state, action) {\n      state.isLoading = false;\n      state.data = action.payload;\n    },\n    GET_POSTS_ERROR(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    DONE(state, action) {},\n  },\n});\n\nconst { reducer, actions } = todoSlice;\nexport const {\n  ADD,\n  ADD_POST_SUCCESS,\n  ADD_POST_ERROR,\n  DEL,\n  GET,\n  GET_POSTS_SUCCESS,\n  GET_POSTS_ERROR,\n  DONE,\n} = actions;\nexport default reducer;\n/*\nconst ADD = \"todo/ADD\";\nconst DEL = \"todo/DEL\";\nconst GET = \"todo/GET\";\nconst DONE = \"todo/DONE\";\n\nconst GET_POSTS_SUCCESS = \"todo/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"todo/GET_POSTS_ERROR\";\n\nconst ADD_POST_SUCCESS = \"todo/ADD_POSTS_SUCCESS\";\nconst ADD_POST_ERROR = \"todo/ADD_POST_ERROR\";\n\nexport const add = createAction(ADD);\nexport const del = createAction(DEL);\nexport const get = createAction(GET);\nexport const done = createAction(DONE);\n\nconst todoReducer = createReducer(\n  initialState,\n  {\n    [ADD]: (state, action) => {\n      //return state.set(\"isLoading\", true);\n      state.isLoading = true;\n    },\n    [ADD_POST_SUCCESS]: (state, action) => {\n      //return state.set(\"isLoading\", false);\n      state.isLoading = false;\n    },\n    [ADD_POST_ERROR]: (state, action) => {\n      //return state.merge({ isLoading: false, error: action.payload });\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    [DEL]: (state, action) => {\n      return;\n    },\n    [GET]: (state, action) => {\n      //return state.set(\"isLoading\", true);\n      state.isLoading = true;\n    },\n    [GET_POSTS_SUCCESS]: (state, action) => {\n      //return state.merge({ isLoading: false, data: action.payload });\n      state.isLoading = false;\n      state.data = action.payload;\n    },\n    [GET_POSTS_ERROR]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    [DONE]: (state, action) => {\n      return;\n    },\n  },\n  initialState\n);\n*/\n"]},"metadata":{},"sourceType":"module"}