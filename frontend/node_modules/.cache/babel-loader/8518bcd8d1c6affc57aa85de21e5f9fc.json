{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { Map, List } from \"immutable\";\nimport * as postApi from \"../api/posts\";\nimport { call, put, all, takeEvery } from \"redux-saga/effects\";\nconst ADD = \"todo/ADD\";\nconst DEL = \"todo/DEL\";\nconst GET = \"todo/GET\";\nconst DONE = \"todo/DONE\";\nconst GET_POSTS_SUCCESS = \"todo/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"todo/GET_POSTS_ERROR\";\nconst ADD_POST_SUCCESS = \"todo/ADD_POSTS_SUCCESS\";\nconst ADD_POST_ERROR = \"todo/ADD_POST_ERROR\";\nexport const add = createAction(ADD);\nexport const del = createAction(DEL);\nexport const get = createAction(GET);\nexport const done = createAction(DONE);\n\nconst initialState = function* getPostsSaga() {\n  try {\n    const posts = yield call(postApi.getPosts);\n    yield put({\n      type: GET_POSTS_SUCCESS,\n      payload: posts\n    });\n  } catch (e) {\n    yield put({\n      type: GET_POSTS_ERROR,\n      error: true,\n      payload: e\n    });\n  }\n};\n\nfunction* addPostSaga() {\n  try {\n    const result = yield call(postApi.createPost);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      payload: result\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_ERROR,\n      error: true,\n      payload: e\n    });\n  }\n}\n\nexport function* postsSaga() {\n  yield takeEvery(GET, getPostsSaga);\n  yield takeEvery(ADD, addPostSaga);\n}\nexport function* rootSaga() {\n  yield all([postsSaga()]);\n}\nexport default handleActions({\n  [ADD]: (state, action) => {\n    return state.set();\n  },\n  [ADD_POST_SUCCESS]: (state, action) => {\n    return;\n  },\n  [ADD_POST_ERROR]: (state, action) => {\n    return;\n  },\n  [DEL]: (state, action) => {\n    return;\n  },\n  [GET]: (state, action) => {\n    return;\n  },\n  [GET_POSTS_SUCCESS]: (state, action) => {\n    return;\n  },\n  [GET_POSTS_ERROR]: (state, action) => {\n    return;\n  },\n  [DONE]: (state, action) => {\n    return;\n  }\n}, initialState);","map":{"version":3,"sources":["/home/cmkrosp/go/src/react-redux-todo/frontend/src/modules/todo.js"],"names":["createAction","handleActions","Map","List","postApi","call","put","all","takeEvery","ADD","DEL","GET","DONE","GET_POSTS_SUCCESS","GET_POSTS_ERROR","ADD_POST_SUCCESS","ADD_POST_ERROR","add","del","get","done","initialState","getPostsSaga","posts","getPosts","type","payload","e","error","addPostSaga","result","createPost","postsSaga","rootSaga","state","action","set"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { Map, List } from \"immutable\";\nimport * as postApi from \"../api/posts\";\nimport { call, put, all, takeEvery } from \"redux-saga/effects\";\n\nconst ADD = \"todo/ADD\";\nconst DEL = \"todo/DEL\";\nconst GET = \"todo/GET\";\nconst DONE = \"todo/DONE\";\n\nconst GET_POSTS_SUCCESS = \"todo/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"todo/GET_POSTS_ERROR\";\n\nconst ADD_POST_SUCCESS = \"todo/ADD_POSTS_SUCCESS\";\nconst ADD_POST_ERROR = \"todo/ADD_POST_ERROR\";\n\nexport const add = createAction(ADD);\nexport const del = createAction(DEL);\nexport const get = createAction(GET);\nexport const done = createAction(DONE);\n\nconst initialState = function* getPostsSaga() {\n  try {\n    const posts = yield call(postApi.getPosts);\n    yield put({\n      type: GET_POSTS_SUCCESS,\n      payload: posts,\n    });\n  } catch (e) {\n    yield put({\n      type: GET_POSTS_ERROR,\n      error: true,\n      payload: e,\n    });\n  }\n};\n\nfunction* addPostSaga() {\n  try {\n    const result = yield call(postApi.createPost);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      payload: result,\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_ERROR,\n      error: true,\n      payload: e,\n    });\n  }\n}\nexport function* postsSaga() {\n  yield takeEvery(GET, getPostsSaga);\n  yield takeEvery(ADD, addPostSaga);\n}\n\nexport function* rootSaga() {\n  yield all([postsSaga()]);\n}\n\nexport default handleActions(\n  {\n    [ADD]: (state, action) => {\n      return state.set();\n    },\n    [ADD_POST_SUCCESS]: (state, action) => {\n      return;\n    },\n    [ADD_POST_ERROR]: (state, action) => {\n      return;\n    },\n    [DEL]: (state, action) => {\n      return;\n    },\n    [GET]: (state, action) => {\n      return;\n    },\n    [GET_POSTS_SUCCESS]: (state, action) => {\n      return;\n    },\n    [GET_POSTS_ERROR]: (state, action) => {\n      return;\n    },\n    [DONE]: (state, action) => {\n      return;\n    },\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}