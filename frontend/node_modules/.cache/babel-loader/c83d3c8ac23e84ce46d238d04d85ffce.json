{"ast":null,"code":"import { call, cancelled, put, take, takeEvery } from \"redux-saga/effects\";\nimport { END, eventChannel } from \"redux-saga\";\nimport createWebSocketConnection from \"../webSocket/socket\";\nimport { ADD_MSG, CONNECT_SOCKET, SOCKET_CONNECTION_ERROR, SOCKET_CONNECTION_SUCCESS } from \"../modules/chat\";\n\nfunction createEventChannel(socket) {\n  return eventChannel(emit => {\n    socket.onmessage = event => {\n      emit(event.data);\n    };\n\n    socket.onclose = () => {\n      emit(END);\n    };\n  });\n}\n\nfunction* listenForSocketMessages() {\n  let socket;\n  let socketChannel;\n\n  try {\n    socket = yield call(createWebSocketConnection);\n    socketChannel = yield call(createEventChannel, socket);\n    yield put(SOCKET_CONNECTION_SUCCESS());\n\n    while (true) {\n      const payload = yield take(socketChannel);\n      console.log(payload);\n      yield put(ADD_MSG(payload));\n    }\n  } catch (e) {\n    yield put(SOCKET_CONNECTION_ERROR());\n  } finally {\n    if (yield cancelled()) {\n      socketChannel.close();\n      socket.close();\n    } else {\n      yield put(SOCKET_CONNECTION_ERROR(\"WebSocket disconnected\"));\n    }\n  }\n}\n\nexport function* connectWebSocket() {\n  yield takeEvery(CONNECT_SOCKET, listenForSocketMessages); //DISCONNECT TODO\n\n  /*\n  yield take(SOCKET_DISCONNECT);\n  yield cancel(socketTask);\n  yield put(SOCKET_DISCONNECT_SUCCESS);\n  */\n}","map":{"version":3,"sources":["/home/cmkrosp/go/src/react-redux-todo/frontend/src/saga/webSocketSaga.js"],"names":["call","cancelled","put","take","takeEvery","END","eventChannel","createWebSocketConnection","ADD_MSG","CONNECT_SOCKET","SOCKET_CONNECTION_ERROR","SOCKET_CONNECTION_SUCCESS","createEventChannel","socket","emit","onmessage","event","data","onclose","listenForSocketMessages","socketChannel","payload","console","log","e","close","connectWebSocket"],"mappings":"AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,SAArC,QAAsD,oBAAtD;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,YAAlC;AACA,OAAOC,yBAAP,MAAsC,qBAAtC;AACA,SACEC,OADF,EAEEC,cAFF,EAGEC,uBAHF,EAIEC,yBAJF,QAKO,iBALP;;AAOA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC,SAAOP,YAAY,CAAEQ,IAAD,IAAU;AAC5BD,IAAAA,MAAM,CAACE,SAAP,GAAoBC,KAAD,IAAW;AAC5BF,MAAAA,IAAI,CAACE,KAAK,CAACC,IAAP,CAAJ;AACD,KAFD;;AAGAJ,IAAAA,MAAM,CAACK,OAAP,GAAiB,MAAM;AACrBJ,MAAAA,IAAI,CAACT,GAAD,CAAJ;AACD,KAFD;AAGD,GAPkB,CAAnB;AAQD;;AAED,UAAUc,uBAAV,GAAoC;AAClC,MAAIN,MAAJ;AACA,MAAIO,aAAJ;;AAEA,MAAI;AACFP,IAAAA,MAAM,GAAG,MAAMb,IAAI,CAACO,yBAAD,CAAnB;AACAa,IAAAA,aAAa,GAAG,MAAMpB,IAAI,CAACY,kBAAD,EAAqBC,MAArB,CAA1B;AAEA,UAAMX,GAAG,CAACS,yBAAyB,EAA1B,CAAT;;AAEA,WAAO,IAAP,EAAa;AACX,YAAMU,OAAO,GAAG,MAAMlB,IAAI,CAACiB,aAAD,CAA1B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,YAAMnB,GAAG,CAACM,OAAO,CAACa,OAAD,CAAR,CAAT;AACD;AACF,GAXD,CAWE,OAAOG,CAAP,EAAU;AACV,UAAMtB,GAAG,CAACQ,uBAAuB,EAAxB,CAAT;AACD,GAbD,SAaU;AACR,QAAI,MAAMT,SAAS,EAAnB,EAAuB;AACrBmB,MAAAA,aAAa,CAACK,KAAd;AACAZ,MAAAA,MAAM,CAACY,KAAP;AACD,KAHD,MAGO;AACL,YAAMvB,GAAG,CAACQ,uBAAuB,CAAC,wBAAD,CAAxB,CAAT;AACD;AACF;AACF;;AAED,OAAO,UAAUgB,gBAAV,GAA6B;AAClC,QAAMtB,SAAS,CAACK,cAAD,EAAiBU,uBAAjB,CAAf,CADkC,CAGlC;;AACA;AACF;AACA;AACA;AACA;AACC","sourcesContent":["import { call, cancelled, put, take, takeEvery } from \"redux-saga/effects\";\nimport { END, eventChannel } from \"redux-saga\";\nimport createWebSocketConnection from \"../webSocket/socket\";\nimport {\n  ADD_MSG,\n  CONNECT_SOCKET,\n  SOCKET_CONNECTION_ERROR,\n  SOCKET_CONNECTION_SUCCESS,\n} from \"../modules/chat\";\n\nfunction createEventChannel(socket) {\n  return eventChannel((emit) => {\n    socket.onmessage = (event) => {\n      emit(event.data);\n    };\n    socket.onclose = () => {\n      emit(END);\n    };\n  });\n}\n\nfunction* listenForSocketMessages() {\n  let socket;\n  let socketChannel;\n\n  try {\n    socket = yield call(createWebSocketConnection);\n    socketChannel = yield call(createEventChannel, socket);\n\n    yield put(SOCKET_CONNECTION_SUCCESS());\n\n    while (true) {\n      const payload = yield take(socketChannel);\n      console.log(payload);\n      yield put(ADD_MSG(payload));\n    }\n  } catch (e) {\n    yield put(SOCKET_CONNECTION_ERROR());\n  } finally {\n    if (yield cancelled()) {\n      socketChannel.close();\n      socket.close();\n    } else {\n      yield put(SOCKET_CONNECTION_ERROR(\"WebSocket disconnected\"));\n    }\n  }\n}\n\nexport function* connectWebSocket() {\n  yield takeEvery(CONNECT_SOCKET, listenForSocketMessages);\n\n  //DISCONNECT TODO\n  /*\n  yield take(SOCKET_DISCONNECT);\n  yield cancel(socketTask);\n  yield put(SOCKET_DISCONNECT_SUCCESS);\n  */\n}\n"]},"metadata":{},"sourceType":"module"}