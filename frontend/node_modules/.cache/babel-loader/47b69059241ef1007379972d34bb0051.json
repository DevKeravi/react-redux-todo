{"ast":null,"code":"import { call, cancel, cancelled, delay, fork, put, take, takeEvery, takeLeading } from \"redux-saga/effects\";\nimport { INITALIZE_WS_CHANNEL } from \"../modules/todo\";\nimport { END, eventChannel } from \"redux-saga\";\nimport createWebSocketConnection from \"../webSocket/socket\";\nimport { ADD_MSG, CONNECT_SOCKET, SOCKET_CONNECTION_ERROR, SOCKET_CONNECTION_SUCCESS, SOCKET_DISCONNECT, SOCKET_DISCONNECT_SUCCESS } from \"../modules/chat\";\n\nfunction createEventChannel(socket) {\n  return eventChannel(emit => {\n    socket.onmessage = event => {\n      emit(event.data);\n    };\n\n    socket.onclose = () => {\n      emit(END);\n    };\n  });\n}\n\nfunction* listenForSocketMessages() {\n  let socket;\n  let socketChannel;\n\n  try {\n    socket = yield call(createWebSocketConnection);\n    socketChannel = yield call(createEventChannel, socket);\n    yield put(SOCKET_CONNECTION_SUCCESS);\n\n    while (true) {\n      const payload = yield take(socketChannel);\n      yield put(ADD_MSG(payload));\n    }\n  } catch (e) {\n    yield put(SOCKET_CONNECTION_ERROR);\n  } finally {\n    if (yield cancelled()) {\n      socketChannel.close();\n      socket.close();\n    } else {\n      yield put(SOCKET_CONNECTION_ERROR(\"WebSocket disconnected\"));\n    }\n  }\n}\n\nexport function* connectWebSocket() {\n  yield takeLeading(CONNECT_SOCKET, listenForSocketMessages); //DISCONNECT TODO\n\n  /*\n  yield take(SOCKET_DISCONNECT);\n  yield cancel(socketTask);\n  yield put(SOCKET_DISCONNECT_SUCCESS);\n  */\n}","map":{"version":3,"sources":["/home/cmkrosp/go/src/react-redux-todo/frontend/src/saga/webSocketSaga.js"],"names":["call","cancel","cancelled","delay","fork","put","take","takeEvery","takeLeading","INITALIZE_WS_CHANNEL","END","eventChannel","createWebSocketConnection","ADD_MSG","CONNECT_SOCKET","SOCKET_CONNECTION_ERROR","SOCKET_CONNECTION_SUCCESS","SOCKET_DISCONNECT","SOCKET_DISCONNECT_SUCCESS","createEventChannel","socket","emit","onmessage","event","data","onclose","listenForSocketMessages","socketChannel","payload","e","close","connectWebSocket"],"mappings":"AAAA,SACEA,IADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,IALF,EAMEC,GANF,EAOEC,IAPF,EAQEC,SARF,EASEC,WATF,QAUO,oBAVP;AAWA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,YAAlC;AACA,OAAOC,yBAAP,MAAsC,qBAAtC;AACA,SACEC,OADF,EAEEC,cAFF,EAGEC,uBAHF,EAIEC,yBAJF,EAKEC,iBALF,EAMEC,yBANF,QAOO,iBAPP;;AASA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC,SAAOT,YAAY,CAAEU,IAAD,IAAU;AAC5BD,IAAAA,MAAM,CAACE,SAAP,GAAoBC,KAAD,IAAW;AAC5BF,MAAAA,IAAI,CAACE,KAAK,CAACC,IAAP,CAAJ;AACD,KAFD;;AAGAJ,IAAAA,MAAM,CAACK,OAAP,GAAiB,MAAM;AACrBJ,MAAAA,IAAI,CAACX,GAAD,CAAJ;AACD,KAFD;AAGD,GAPkB,CAAnB;AAQD;;AAED,UAAUgB,uBAAV,GAAoC;AAClC,MAAIN,MAAJ;AACA,MAAIO,aAAJ;;AAEA,MAAI;AACFP,IAAAA,MAAM,GAAG,MAAMpB,IAAI,CAACY,yBAAD,CAAnB;AACAe,IAAAA,aAAa,GAAG,MAAM3B,IAAI,CAACmB,kBAAD,EAAqBC,MAArB,CAA1B;AAEA,UAAMf,GAAG,CAACW,yBAAD,CAAT;;AAEA,WAAO,IAAP,EAAa;AACX,YAAMY,OAAO,GAAG,MAAMtB,IAAI,CAACqB,aAAD,CAA1B;AACA,YAAMtB,GAAG,CAACQ,OAAO,CAACe,OAAD,CAAR,CAAT;AACD;AACF,GAVD,CAUE,OAAOC,CAAP,EAAU;AACV,UAAMxB,GAAG,CAACU,uBAAD,CAAT;AACD,GAZD,SAYU;AACR,QAAI,MAAMb,SAAS,EAAnB,EAAuB;AACrByB,MAAAA,aAAa,CAACG,KAAd;AACAV,MAAAA,MAAM,CAACU,KAAP;AACD,KAHD,MAGO;AACL,YAAMzB,GAAG,CAACU,uBAAuB,CAAC,wBAAD,CAAxB,CAAT;AACD;AACF;AACF;;AAED,OAAO,UAAUgB,gBAAV,GAA6B;AAClC,QAAMvB,WAAW,CAACM,cAAD,EAAiBY,uBAAjB,CAAjB,CADkC,CAGlC;;AACA;AACF;AACA;AACA;AACA;AACC","sourcesContent":["import {\n  call,\n  cancel,\n  cancelled,\n  delay,\n  fork,\n  put,\n  take,\n  takeEvery,\n  takeLeading,\n} from \"redux-saga/effects\";\nimport { INITALIZE_WS_CHANNEL } from \"../modules/todo\";\nimport { END, eventChannel } from \"redux-saga\";\nimport createWebSocketConnection from \"../webSocket/socket\";\nimport {\n  ADD_MSG,\n  CONNECT_SOCKET,\n  SOCKET_CONNECTION_ERROR,\n  SOCKET_CONNECTION_SUCCESS,\n  SOCKET_DISCONNECT,\n  SOCKET_DISCONNECT_SUCCESS,\n} from \"../modules/chat\";\n\nfunction createEventChannel(socket) {\n  return eventChannel((emit) => {\n    socket.onmessage = (event) => {\n      emit(event.data);\n    };\n    socket.onclose = () => {\n      emit(END);\n    };\n  });\n}\n\nfunction* listenForSocketMessages() {\n  let socket;\n  let socketChannel;\n\n  try {\n    socket = yield call(createWebSocketConnection);\n    socketChannel = yield call(createEventChannel, socket);\n\n    yield put(SOCKET_CONNECTION_SUCCESS);\n\n    while (true) {\n      const payload = yield take(socketChannel);\n      yield put(ADD_MSG(payload));\n    }\n  } catch (e) {\n    yield put(SOCKET_CONNECTION_ERROR);\n  } finally {\n    if (yield cancelled()) {\n      socketChannel.close();\n      socket.close();\n    } else {\n      yield put(SOCKET_CONNECTION_ERROR(\"WebSocket disconnected\"));\n    }\n  }\n}\n\nexport function* connectWebSocket() {\n  yield takeLeading(CONNECT_SOCKET, listenForSocketMessages);\n\n  //DISCONNECT TODO\n  /*\n  yield take(SOCKET_DISCONNECT);\n  yield cancel(socketTask);\n  yield put(SOCKET_DISCONNECT_SUCCESS);\n  */\n}\n"]},"metadata":{},"sourceType":"module"}