{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { Map, List } from \"immutable\";\nconst ADD = \"todo/ADD\";\nconst DEL = \"todo/DEL\";\nconst GET = \"todo/GET\";\nconst DONE = \"todo/DONE\";\nexport const add = createAction(ADD);\nexport const del = createAction(DEL);\nexport const get = createAction(GET);\nexport const done = createAction(DONE);\nconst initialState = List([Map({\n  text: \"\",\n  date: \"\",\n  id: null,\n  isdone: false\n})]);\nexport default handleActions({\n  [ADD]: (state, action) => {\n    return state.push(Map(action.payload));\n  },\n  [DEL]: (state, action) => {\n    const index = state.findIndex(todo => todo.get(\"id\") === action.payload.id);\n    return state.delete(index);\n  },\n  [GET]: (state, action) => {\n    const index = state.findIndex(todo => todo.get(\"text\") === \"\");\n    console.log(index);\n    return state.delete(index);\n  },\n  [DONE]: (state, action) => {\n    const index = state.findIndex(todo => todo.get(\"id\") === action.payload.id);\n    return state.setIn([index, \"isdone\"], !state.getIn([index, \"isdone\"]));\n  }\n}, initialState);","map":{"version":3,"sources":["/home/cmkrosp/go/src/react-redux-todo/frontend/src/modules/todo.js"],"names":["createAction","handleActions","Map","List","ADD","DEL","GET","DONE","add","del","get","done","initialState","text","date","id","isdone","state","action","push","payload","index","findIndex","todo","delete","console","log","setIn","getIn"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,WAA1B;AAEA,MAAMC,GAAG,GAAG,UAAZ;AACA,MAAMC,GAAG,GAAG,UAAZ;AACA,MAAMC,GAAG,GAAG,UAAZ;AACA,MAAMC,IAAI,GAAG,WAAb;AAEA,OAAO,MAAMC,GAAG,GAAGR,YAAY,CAACI,GAAD,CAAxB;AACP,OAAO,MAAMK,GAAG,GAAGT,YAAY,CAACK,GAAD,CAAxB;AACP,OAAO,MAAMK,GAAG,GAAGV,YAAY,CAACM,GAAD,CAAxB;AACP,OAAO,MAAMK,IAAI,GAAGX,YAAY,CAACO,IAAD,CAAzB;AAEP,MAAMK,YAAY,GAAGT,IAAI,CAAC,CACxBD,GAAG,CAAC;AACFW,EAAAA,IAAI,EAAE,EADJ;AAEFC,EAAAA,IAAI,EAAE,EAFJ;AAGFC,EAAAA,EAAE,EAAE,IAHF;AAIFC,EAAAA,MAAM,EAAE;AAJN,CAAD,CADqB,CAAD,CAAzB;AASA,eAAef,aAAa,CAC1B;AACE,GAACG,GAAD,GAAO,CAACa,KAAD,EAAQC,MAAR,KAAmB;AACxB,WAAOD,KAAK,CAACE,IAAN,CAAWjB,GAAG,CAACgB,MAAM,CAACE,OAAR,CAAd,CAAP;AACD,GAHH;AAIE,GAACf,GAAD,GAAO,CAACY,KAAD,EAAQC,MAAR,KAAmB;AACxB,UAAMG,KAAK,GAAGJ,KAAK,CAACK,SAAN,CACXC,IAAD,IAAUA,IAAI,CAACb,GAAL,CAAS,IAAT,MAAmBQ,MAAM,CAACE,OAAP,CAAeL,EADhC,CAAd;AAGA,WAAOE,KAAK,CAACO,MAAN,CAAaH,KAAb,CAAP;AACD,GATH;AAUE,GAACf,GAAD,GAAO,CAACW,KAAD,EAAQC,MAAR,KAAmB;AACxB,UAAMG,KAAK,GAAGJ,KAAK,CAACK,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACb,GAAL,CAAS,MAAT,MAAqB,EAA/C,CAAd;AAEAe,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,WAAOJ,KAAK,CAACO,MAAN,CAAaH,KAAb,CAAP;AACD,GAfH;AAgBE,GAACd,IAAD,GAAQ,CAACU,KAAD,EAAQC,MAAR,KAAmB;AACzB,UAAMG,KAAK,GAAGJ,KAAK,CAACK,SAAN,CACXC,IAAD,IAAUA,IAAI,CAACb,GAAL,CAAS,IAAT,MAAmBQ,MAAM,CAACE,OAAP,CAAeL,EADhC,CAAd;AAGA,WAAOE,KAAK,CAACU,KAAN,CAAY,CAACN,KAAD,EAAQ,QAAR,CAAZ,EAA+B,CAACJ,KAAK,CAACW,KAAN,CAAY,CAACP,KAAD,EAAQ,QAAR,CAAZ,CAAhC,CAAP;AACD;AArBH,CAD0B,EAwB1BT,YAxB0B,CAA5B","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { Map, List } from \"immutable\";\n\nconst ADD = \"todo/ADD\";\nconst DEL = \"todo/DEL\";\nconst GET = \"todo/GET\";\nconst DONE = \"todo/DONE\";\n\nexport const add = createAction(ADD);\nexport const del = createAction(DEL);\nexport const get = createAction(GET);\nexport const done = createAction(DONE);\n\nconst initialState = List([\n  Map({\n    text: \"\",\n    date: \"\",\n    id: null,\n    isdone: false,\n  }),\n]);\n\nexport default handleActions(\n  {\n    [ADD]: (state, action) => {\n      return state.push(Map(action.payload));\n    },\n    [DEL]: (state, action) => {\n      const index = state.findIndex(\n        (todo) => todo.get(\"id\") === action.payload.id\n      );\n      return state.delete(index);\n    },\n    [GET]: (state, action) => {\n      const index = state.findIndex((todo) => todo.get(\"text\") === \"\");\n\n      console.log(index);\n      return state.delete(index);\n    },\n    [DONE]: (state, action) => {\n      const index = state.findIndex(\n        (todo) => todo.get(\"id\") === action.payload.id\n      );\n      return state.setIn([index, \"isdone\"], !state.getIn([index, \"isdone\"]));\n    },\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}