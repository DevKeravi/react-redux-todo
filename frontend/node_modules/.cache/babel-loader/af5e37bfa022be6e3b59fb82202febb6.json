{"ast":null,"code":"import { call, delay, take, takeEvery } from \"redux-saga/effects\";\nimport { INITALIZE_WS_CHANNEL } from \"../modules/todo\";\nimport { eventChannel } from \"redux-saga\";\n\nfunction createEventChannel() {\n  return eventChannel(emit => {\n    const ws = new WebSocket(\"ws://localhost:5000/ws\");\n\n    ws.onopen = () => {\n      console.log(\"Opening Websocket\");\n    };\n\n    ws.onerror = error => {\n      console.log(\"webSocket Error:\", error);\n    };\n\n    ws.onmessage = e => {\n      return emit({\n        data: JSON.parse(e.data)\n      });\n    };\n\n    ws.onclose = e => {\n      if (e.code === 1005) {\n        console.log(\"WebSocket closed\");\n      } else {\n        console.log(\"Socket is closed Unexpectedly. Reconnect will be attempted in 4 second.\", e.reason);\n        setTimeout(() => {\n          createEventChannel();\n        }, 4000);\n      }\n    };\n\n    return () => {\n      console.log(\"Closing webSocket...\");\n      ws.close();\n    };\n  });\n}\n\nfunction* initializeWebScoketsChannel() {\n  const channel = yield call(createEventChannel);\n\n  while (true) {\n    const {\n      data\n    } = yield take(channel); //TODO\n    //yield put(updateM)\n\n    console.log(data);\n    yield delay(2000);\n    console.log(\"delayed 2sec\");\n  }\n}\n\nexport function* initWebSocket() {\n  yield takeEvery(INITALIZE_WS_CHANNEL, initializeWebScoketsChannel);\n}","map":{"version":3,"sources":["/home/cmkrosp/go/src/react-redux-todo/frontend/src/saga/webSocketSaga.js"],"names":["call","delay","take","takeEvery","INITALIZE_WS_CHANNEL","eventChannel","createEventChannel","emit","ws","WebSocket","onopen","console","log","onerror","error","onmessage","e","data","JSON","parse","onclose","code","reason","setTimeout","close","initializeWebScoketsChannel","channel","initWebSocket"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,YAAT,QAA6B,YAA7B;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAOD,YAAY,CAAEE,IAAD,IAAU;AAC5B,UAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAc,wBAAd,CAAX;;AACAD,IAAAA,EAAE,CAACE,MAAH,GAAY,MAAM;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KAFD;;AAGAJ,IAAAA,EAAE,CAACK,OAAH,GAAcC,KAAD,IAAW;AACtBH,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCE,KAAhC;AACD,KAFD;;AAGAN,IAAAA,EAAE,CAACO,SAAH,GAAgBC,CAAD,IAAO;AACpB,aAAOT,IAAI,CAAC;AAAEU,QAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACC,IAAb;AAAR,OAAD,CAAX;AACD,KAFD;;AAGAT,IAAAA,EAAE,CAACY,OAAH,GAAcJ,CAAD,IAAO;AAClB,UAAIA,CAAC,CAACK,IAAF,KAAW,IAAf,EAAqB;AACnBV,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACC,GAAR,CACE,yEADF,EAEEI,CAAC,CAACM,MAFJ;AAIAC,QAAAA,UAAU,CAAC,MAAM;AACfjB,UAAAA,kBAAkB;AACnB,SAFS,EAEP,IAFO,CAAV;AAGD;AACF,KAZD;;AAaA,WAAO,MAAM;AACXK,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAJ,MAAAA,EAAE,CAACgB,KAAH;AACD,KAHD;AAID,GA5BkB,CAAnB;AA6BD;;AAED,UAAUC,2BAAV,GAAwC;AACtC,QAAMC,OAAO,GAAG,MAAM1B,IAAI,CAACM,kBAAD,CAA1B;;AACA,SAAO,IAAP,EAAa;AACX,UAAM;AAAEW,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACwB,OAAD,CAA3B,CADW,CAEX;AACA;;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;AACF;;AAED,OAAO,UAAUe,aAAV,GAA0B;AAC/B,QAAMxB,SAAS,CAACC,oBAAD,EAAuBqB,2BAAvB,CAAf;AACD","sourcesContent":["import { call, delay, take, takeEvery } from \"redux-saga/effects\";\nimport { INITALIZE_WS_CHANNEL } from \"../modules/todo\";\nimport { eventChannel } from \"redux-saga\";\n\nfunction createEventChannel() {\n  return eventChannel((emit) => {\n    const ws = new WebSocket(\"ws://localhost:5000/ws\");\n    ws.onopen = () => {\n      console.log(\"Opening Websocket\");\n    };\n    ws.onerror = (error) => {\n      console.log(\"webSocket Error:\", error);\n    };\n    ws.onmessage = (e) => {\n      return emit({ data: JSON.parse(e.data) });\n    };\n    ws.onclose = (e) => {\n      if (e.code === 1005) {\n        console.log(\"WebSocket closed\");\n      } else {\n        console.log(\n          \"Socket is closed Unexpectedly. Reconnect will be attempted in 4 second.\",\n          e.reason\n        );\n        setTimeout(() => {\n          createEventChannel();\n        }, 4000);\n      }\n    };\n    return () => {\n      console.log(\"Closing webSocket...\");\n      ws.close();\n    };\n  });\n}\n\nfunction* initializeWebScoketsChannel() {\n  const channel = yield call(createEventChannel);\n  while (true) {\n    const { data } = yield take(channel);\n    //TODO\n    //yield put(updateM)\n    console.log(data);\n    yield delay(2000);\n    console.log(\"delayed 2sec\");\n  }\n}\n\nexport function* initWebSocket() {\n  yield takeEvery(INITALIZE_WS_CHANNEL, initializeWebScoketsChannel);\n}\n"]},"metadata":{},"sourceType":"module"}